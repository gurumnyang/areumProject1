#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('areumproject1:server');
const http = require('http');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/*

const greenlock = require('greenlock-express');

let httpServer;
let httpsServer;

greenlock
    .init({
    packageRoot: path.join(__dirname, '../'),
    configDir: './greenlock.d',
    maintainerEmail: '2421113@areum.hs.kr',
    cluster: false
  })
    .ready(function (glx) {
      httpServer = glx.httpServer(null, app);

      httpServer.listen(port);
      httpServer.on('error', onError);
      httpServer.on('listening', ()=>onListening(httpServer));

      httpsServer = glx.httpsServer(null, app);

        httpsServer.listen(3003);
        httpsServer.on('error', onError);
        httpsServer.on('listening', ()=>onListening(httpsServer));



  });*/

/**
 * Create HTTP server.
 */


httpServer = http.createServer(app);

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', ()=>onListening(httpServer));





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
